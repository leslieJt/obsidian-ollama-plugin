import esbuild from 'esbuild';
import process from 'process';
import builtins from 'builtin-modules';
import fs from 'fs/promises';
import path from 'path';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === 'production';

const OBSIDIAN_PLUGIN_DIR = '/Users/jt/Library/Mobile Documents/iCloud~md~obsidian/Documents/.obsidian/plugins/obsidian-ollama-plugin';

const copyToObsidianPlugin = {
    name: 'copy-to-obsidian',
    setup(build) {
        build.onEnd(async (result) => {
            try {
                if (result.errors && result.errors.length > 0) {
                    return;
                }
                await fs.mkdir(OBSIDIAN_PLUGIN_DIR, { recursive: true });
                const filesToCopy = [
                    { src: 'main.js', dest: path.join(OBSIDIAN_PLUGIN_DIR, 'main.js') },
                    { src: 'manifest.json', dest: path.join(OBSIDIAN_PLUGIN_DIR, 'manifest.json') },
                    { src: 'styles.css', dest: path.join(OBSIDIAN_PLUGIN_DIR, 'styles.css') },
                ];
                await Promise.all(
                    filesToCopy.map(({ src, dest }) => fs.copyFile(src, dest))
                );
                console.log(`Copied main.js, manifest.json and styles.css to ${OBSIDIAN_PLUGIN_DIR}`);
            } catch (error) {
                console.error('Failed to copy build artifacts to Obsidian plugin directory:', error);
            }
        });
    },
};

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ['main.ts'],
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins,
	],
	format: 'cjs',
	target: 'es2018',
	logLevel: 'info',
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	outfile: 'main.js',
    minify: prod,
    plugins: [copyToObsidianPlugin],
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
